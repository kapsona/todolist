{"version":3,"sources":["components/header/header.component.jsx","components/task-form/task-form.component.jsx","components/task/task.component.jsx","components/task-list/task-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","TaskForm","task","handleChange","saveTask","className","onSubmit","type","name","value","onChange","placeholder","Task","index","toggler","handleDelete","handleEdit","deleting","isComplete","onClick","TaskList","tasks","length","map","tas","indx","App","props","event","preventDefault","newTask","state","todo","console","log","setState","todos","target","toggleComplete","curState","item","newItem","itm","newList","filter","setTimeout","clearList","editing","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iVAOeA,G,YAJA,WACb,OAAO,0CCmBMC,G,MApBE,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SACtC,OACE,yBAAKC,UAAU,aACb,0BAAMC,SAAUF,GACd,2BACEG,KAAK,OACLC,KAAK,OACLH,UAAU,YACVI,MAAOP,EACPQ,SAAUP,EACVQ,YAAY,uBAEd,4BAAQN,UAAU,UAAUE,KAAK,UAAjC,YCYOK,G,YAxBF,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,MAAOX,EAA8C,EAA9CA,KAAMY,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAClD,OACE,wBAAIX,UAAS,oBAAeH,EAAKe,WAC/B,0BACEZ,UAAWH,EAAKgB,WAAa,YAAc,GAC3CC,QAAS,kBAAML,EAAQD,KAEtBX,EAAKA,MAER,yBAAKG,UAAU,cACb,4BAAQA,UAAU,WAAWc,QAAS,kBAAMH,EAAWd,KAAvD,QAGA,4BACEiB,QAAS,kBAAMJ,EAAaF,EAAOX,IACnCG,UAAU,cAFZ,cCeOe,EA1BE,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,MAAOP,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAChD,OACE,6BACGK,EAAMC,QAAU,EACf,6CAEA,6DAGF,wBAAIjB,UAAU,aACXgB,EAAME,KAAI,SAACC,EAAKC,GACf,OACE,kBAAC,EAAD,CACEZ,MAAOY,EACPvB,KAAMsB,EACNV,QAASA,EACTC,aAAcA,EACdC,WAAYA,UCuEXU,E,kDArFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRvB,SAAW,SAACwB,GACVA,EAAMC,iBACN,IAAMC,EAAU,CAAE5B,KAAM,EAAK6B,MAAMC,MAC/B,EAAKD,MAAMC,KAAKV,QAAU,IAE9BW,QAAQC,IAAIJ,GACZ,EAAKK,SAAS,CACZC,MAAM,GAAD,mBAAM,EAAKL,MAAMK,OAAjB,CAAwBN,IAC7BE,KAAM,OAlBS,EAsBnB7B,aAAe,SAACyB,GACdA,EAAMC,iBACN,EAAKM,SAAS,CAAEH,KAAMJ,EAAMS,OAAO5B,SAxBlB,EA2BnB6B,eAAiB,SAACb,GAChB,IAAMc,EAAW,EAAKR,MAAMK,MACtBI,EAAI,eAAQ,EAAKT,MAAMK,MAAMX,IAC7BgB,EAAO,2BAAQD,GAAR,IAActB,YAAasB,EAAKtB,aAC7CqB,EAASd,GAAQgB,EACjB,EAAKN,SAAS,CAAEC,MAAOG,KAhCN,EAmCnBvB,WAAa,SAAC0B,GACZ,IAAMC,EAAU,EAAKZ,MAAMK,MAAMQ,QAAO,SAACJ,GAAD,OAAUA,IAASE,KAE3D,EAAKP,SAAS,CAAEH,KAAMU,EAAIxC,KAAMkC,MAAOO,KAtCtB,EAyCnB5B,aAAe,SAACU,EAAMiB,GACpB,IAAMH,EAAW,EAAKR,MAAMK,MACtBK,EAAO,2BAAQC,GAAR,IAAaxB,YAAawB,EAAIxB,WAAYD,SAAU,SACjEsB,EAASd,GAAQgB,EACjB,EAAKN,SAAS,CAAEC,MAAOG,IAEvBM,YAAW,WACT,IAAMF,EAAU,EAAKZ,MAAMK,MAAMQ,QAC/B,SAACJ,GAAD,MAA4B,SAAlBA,EAAKvB,YAEjB,EAAKkB,SAAS,CAAEC,MAAOO,MACtB,MApDc,EAuDnBG,UAAY,WACV,EAAKX,SAAS,CAAEC,MAAO,GAAIJ,KAAM,GAAIe,SAAS,KAtD9C,EAAKhB,MAAQ,CACXK,MAAO,GACPJ,KAAM,GACNe,SAAS,EACT9B,SAAU,IANK,E,qDA2DT,IAAD,EACoC+B,KAAKjB,MAAxCK,EADD,EACCA,MAAOJ,EADR,EACQA,KADR,EACce,QADd,EACuB9B,SAC9B,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEH,KAAM8B,EACN5B,SAAU4C,KAAK5C,SACfD,aAAc6C,KAAK7C,eAErB,kBAAC,EAAD,CACEkB,MAAOe,EACPtB,QAASkC,KAAKV,eACdvB,aAAciC,KAAKjC,aACnBC,WAAYgC,KAAKhC,aAElBoB,EAAMd,QAAU,GACf,4BAAQjB,UAAU,UAAUc,QAAS6B,KAAKF,WAA1C,oB,GA7EQG,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.b638088c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./header.styles.scss\";\n\nconst Header = () => {\n  return <h1>My ToDos</h1>;\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./task-form.styles.scss\";\n\nconst TaskForm = ({ task, handleChange, saveTask }) => {\n  return (\n    <div className=\"inputForm\">\n      <form onSubmit={saveTask}>\n        <input\n          type=\"text\"\n          name=\"task\"\n          className=\"taskInput\"\n          value={task}\n          onChange={handleChange}\n          placeholder=\"Enter task here...\"\n        />\n        <button className=\"saveBtn\" type=\"submit\">\n          Save\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default TaskForm;\n","import React from \"react\";\nimport \"./task.styles.scss\";\n\nconst Task = ({ index, task, toggler, handleDelete, handleEdit }) => {\n  return (\n    <li className={`task-item ${task.deleting}`}>\n      <span\n        className={task.isComplete ? \"completed\" : \"\"}\n        onClick={() => toggler(index)}\n      >\n        {task.task}\n      </span>\n      <div className=\"action-btn\">\n        <button className=\"edit-btn\" onClick={() => handleEdit(task)}>\n          Edit\n        </button>\n        <button\n          onClick={() => handleDelete(index, task)}\n          className=\"delete-btn\"\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\nimport \"./task-list.styles.scss\";\n\nimport Task from \"../task/task.component\";\n\nconst TaskList = ({ tasks, toggler, handleDelete, handleEdit }) => {\n  return (\n    <div>\n      {tasks.length >= 1 ? (\n        <h3>My tasks list</h3>\n      ) : (\n        <div>You don't have any todo list</div>\n      )}\n\n      <ul className=\"task-list\">\n        {tasks.map((tas, indx) => {\n          return (\n            <Task\n              index={indx}\n              task={tas}\n              toggler={toggler}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default TaskList;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Header from \"./components/header/header.component\";\nimport TaskForm from \"./components/task-form/task-form.component\";\nimport TaskList from \"./components/task-list/task-list.component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      todo: \"\",\n      editing: false,\n      deleting: \"\",\n    };\n  }\n\n  saveTask = (event) => {\n    event.preventDefault();\n    const newTask = { task: this.state.todo };\n    if (this.state.todo.length <= 0) return;\n\n    console.log(newTask);\n    this.setState({\n      todos: [...this.state.todos, newTask],\n      todo: \"\",\n    });\n  };\n\n  handleChange = (event) => {\n    event.preventDefault();\n    this.setState({ todo: event.target.value });\n  };\n\n  toggleComplete = (indx) => {\n    const curState = this.state.todos;\n    const item = { ...this.state.todos[indx] };\n    const newItem = { ...item, isComplete: !item.isComplete };\n    curState[indx] = newItem;\n    this.setState({ todos: curState });\n  };\n\n  handleEdit = (itm) => {\n    const newList = this.state.todos.filter((item) => item !== itm);\n\n    this.setState({ todo: itm.task, todos: newList });\n  };\n\n  handleDelete = (indx, itm) => {\n    const curState = this.state.todos;\n    const newItem = { ...itm, isComplete: !itm.isComplete, deleting: \"fall\" };\n    curState[indx] = newItem;\n    this.setState({ todos: curState });\n\n    setTimeout(() => {\n      const newList = this.state.todos.filter(\n        (item) => item.deleting !== \"fall\"\n      );\n      this.setState({ todos: newList });\n    }, 200);\n  };\n\n  clearList = () => {\n    this.setState({ todos: [], todo: \"\", editing: false });\n  };\n\n  render() {\n    const { todos, todo, editing, deleting } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <TaskForm\n          task={todo}\n          saveTask={this.saveTask}\n          handleChange={this.handleChange}\n        />\n        <TaskList\n          tasks={todos}\n          toggler={this.toggleComplete}\n          handleDelete={this.handleDelete}\n          handleEdit={this.handleEdit}\n        />\n        {todos.length >= 1 && (\n          <button className=\"btn-red\" onClick={this.clearList}>\n            Clear Todos\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}